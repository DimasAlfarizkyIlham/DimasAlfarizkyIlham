//Code TicTacToe

//Nama : Dimas Alfarizky Ilham
//NIM : 5311421023
//Rombel : 103

//Program TicTacToe ini mengambil referensi penyelesaian pada algortitam heuristic.
//Referensi yang diambil adalah penggunaan topologi tree/ pohon dimana setiap langkah akan mempengaruhi dari initialstate hingga goalstate.
//program ini terdiri dari 6 kelas java yaitu GameMain.java sebagai Main class, 
//Cell.java sebagai class untuk mengatur apa yang terjadi pada masing-masing cell papan/board,
//Board.java sebagai class yang mengatur kondisi papan permainan,
//GameState.java sebagai class yang menentukan keadaan saat game bermain,
//State.java sebagai class yang menentukan keadaan currentstate,
//Seed.java yang menentukan kondisi giliran pemain.
//secara keseluruhan 6 class tersebut membangun permainan tictactoe dengan fungsi masing-masing class dan juga memanfaatkan fitur GUI pada java sehingga saat class GameMain.java dicompile maka akan memunculkan papan permainan tictactoe dan dapat dimainkan.
//buat class java tersebut menjadi 6 file java yang dapat dijalankan pada software netbeans, vscode, atau yang lain

//Berikut adalah penjelasan masing-masing class
//**class cell.java

package TicTacToe;
import java.awt.Graphics;
import java.awt.*;
import java.awt.Graphics2D;

public class Cell {
    //content of this cell (Seed.EMPTY, Seed.CROSS, or Seed.NOUGHT)
    Seed content;
    int row, col; // row and column of this cell

    /**Constructor to initialize this cell with the specified row and col */
    public Cell(int row, int col) {
        this.row = row;
        this.col = col;
        clear(); // clear content
    }

    /** Clear this cell's content to EMPTY */
    public void clear() {
        content = Seed.EMPTY;
    }

    /**Paint itself on the graphics canvas, given the Graphics context */
    public void paint(Graphics g) {
        // Use Graphics2D which allows us to set the pen's stroke
        Graphics2D g2d = (Graphics2D)g;
        g2d.setStroke(new BasicStroke(GameMain.SYMBOL_STROKE_WIDTH,
            BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND)); // Graphics2D only
        // Draw the Seed if it is not empty
        int x1 = col * GameMain.CELL_SIZE + GameMain.CELL_PADDING;
        int y1 = row * GameMain.CELL_SIZE + GameMain.CELL_PADDING;
    if (content == Seed.CROSS) {
        g2d.setColor(Color.RED);
        int x2 = (col + 1) * GameMain.CELL_SIZE - GameMain.CELL_PADDING;
        int y2 = (row + 1) * GameMain.CELL_SIZE - GameMain.CELL_PADDING;
        g2d.drawLine(x1, y1, x2, y2);
        g2d.drawLine(x2, y1, x1, y2);
    } else if (content == Seed.NOUGHT) {
        g2d.setColor(Color.BLUE);
        g2d.drawOval(x1, y1, GameMain.SYMBOL_SIZE, GameMain.SYMBOL_SIZE);
        }
    }
}

//class cell.java ini mengatur keadaan pada setiap cell apakah dari 9 cell tictactoe tersebut dalam keadaan kosong, diisi oleh lingkaran, atau diisi oleh cross
//cell diatur dengan satuan coulom dan baris
//pada class ini, cross dan lingkarang dibangung menggunakan fitur grapics2d
//untuk membuat cross untuk keadaan pada see.java, cross dibentuk dengan membuat dua buah garis miring yang diwarnai merah
//untuk membuat lingkaran tinggal diwarnai biru dan juga menggambar oval

//**Board.java

package TicTacToe;
import java.awt.*;

/**
* The Board class models the ROWS-by-COLS game-board.
*/
public class Board {
    // package access
    // composes of 2D array of ROWS-by-COLS Cell instances
    Cell[][] cells;

    /** Constructor to initialize the game board */
    public Board() {

    // allocate the array
    cells = new Cell[GameMain.ROWS][GameMain.COLS];
    for (int row = 0; row < GameMain.ROWS; ++row) {
        for (int col = 0; col < GameMain.COLS; ++col) {
            // allocate element of array
            cells[row][col] = new Cell(row, col);
            }
        }
    }

    /** Initialize (or re-initialize) the game board */
    public void init() {   
        for (int row = 0; row < GameMain.ROWS; ++row) {
            for (int col = 0; col < GameMain.COLS; ++col) {
                // clear the cell content
                cells[row][col].clear();
            }
        }  
    }

    /** Return true if it is a draw (i.e., no more EMPTY cell) */
    public boolean isDraw() {
        for (int row = 0; row < GameMain.ROWS; ++row) {
            for (int col = 0; col < GameMain.COLS; ++col) {
                if (cells[row][col].content == Seed.EMPTY) {
                    // an empty seed found, not a draw, exit
                        return false;
                }
            }
        }
        return true; // no empty cell, it's a draw
    }

    /** Return true if the player with "seed" has won after placing at
        (seedRow, seedCol) */
    public boolean hasWon(Seed seed, int seedRow, int seedCol) {
        return (cells[seedRow][0].content == seed // 3-in-the-row
            && cells[seedRow][1].content == seed
            && cells[seedRow][2].content == seed
        || cells[0][seedCol].content == seed // 3-in-the-column
            && cells[1][seedCol].content == seed
            && cells[2][seedCol].content == seed
        || seedRow == seedCol // 3-in-the-diagonal
            && cells[0][0].content == seed
            && cells[1][1].content == seed
            && cells[2][2].content == seed
        || seedRow + seedCol == 2 // 3-in-the-opposite-diagonal
            && cells[0][2].content == seed
            && cells[1][1].content == seed
            && cells[2][0].content == seed);
    }

    /** Paint itself on the graphics canvas, given the Graphics context */
    public void paint(Graphics g) {
        // Draw the grid-lines
        g.setColor(Color.GRAY);
        for (int row = 1; row < GameMain.ROWS; ++row) {
            g.fillRoundRect(0, GameMain.CELL_SIZE * row - GameMain.GRID_WIDHT_HALF,
                GameMain.CANVAS_WIDTH-1, GameMain.GRID_WIDTH,
                GameMain.GRID_WIDTH, GameMain.GRID_WIDTH);
        }
        for (int col = 1; col < GameMain.COLS; ++col) {
            g.fillRoundRect(GameMain.CELL_SIZE * col - GameMain.GRID_WIDHT_HALF, 0,
                GameMain.GRID_WIDTH, GameMain.CANVAS_HEIGHT - 1,
                GameMain.GRID_WIDTH, GameMain.GRID_WIDTH);
        }
        // Draw all the cells
        for (int row = 0; row < GameMain.ROWS; ++row) {
            for (int col = 0; col < GameMain.COLS; ++col) {
                cells[row][col].paint(g); // ask the cell to paint itself
            }
        }
    }
}

//class board.java ini membangun papan permainan tictactoe yang melanjutkan class dari cell.java
//class ini juga berperan dalam membuat cell baru atau menghapusnya
//class ini juga mengatur bagaimana pemain dapat memenagkan permainan dalam 4 kondisi
//kondisi pertama ketika berturut turut dalam 3 baris
//kondisi kedua ketika berturut turut dalam 3 coulomb
//kondisi ketiga ketika membentuk diagonal
//kondisi keempat ketika kebalikan dari diagonal yang dibentuk
//class ini juga mengatur tampilan dari papan mulai dari ketebalannya

//**class seed.java
package TicTacToe;
/** * Enumeration for the seeds and cell contents */ public enum 
Seed {// to save as "Seed.java"
    EMPTY, CROSS, NOUGHT
}

//class ini berisikan giliran player pada permainan dalam mengisi cell apakah kosong, cross, atau lingkaran

//**class state.java
package TicTacToe;
/** * Enumeration for the various states of the game */ public enum
State { // to save as "State.java"
    PLAYING, DRAW, CROSS_WON, NOUGHT_WON
}

//class ini berisikan keadaan yang akan digunakan sebagai currentstate yaitu bermain, seri, atau ada yang menang antara cross atau lingkaran

//**class GameState.java
package TicTacToe;
/** * Enumeration for the various states of the game */ public enum
GameState { // to save as "GameState.java"
    PLAYING, DRAW, CROSS_WON, NOUGHT_WON
}

//class ini berisikan keadaan dari gamestate saat ini. sama seperti isi yang ada pada class state.java

//Class **GameMain.java
package TicTacToe;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
/**
* Tic-Tac-Toe: Two-player Graphic version with better OO design.
* The Board and Cell classes are separated in their own classes.
*/
@SuppressWarnings("serial")
public class GameMain extends JPanel {
    // Named-constants for the game board
    public static final int ROWS = 3; // ROWS by COLS cells
    public static final int COLS = 3;
    public static final String TITLE = "Tic Tac Toe";

    // Name-constants for the various dimensions used for graphics drawing
    public static final int CELL_SIZE = 100; // cell width and height (square)
    public static final int CANVAS_WIDTH = CELL_SIZE * COLS; // the drawing canvas
    public static final int CANVAS_HEIGHT = CELL_SIZE * ROWS;
    public static final int GRID_WIDTH = 8; // Grid-line's width
    public static final int GRID_WIDHT_HALF = GRID_WIDTH / 2; // Grid-line's half-width

    // Symbols (cross/nought) are displayed inside a cell, with padding from border
    public static final int CELL_PADDING = CELL_SIZE / 6;
    public static final int SYMBOL_SIZE = CELL_SIZE - CELL_PADDING * 2;
    public static final int SYMBOL_STROKE_WIDTH = 8; // pen's stroke width
 
    private Board board; // the game board
    private GameState currentState;//the current state of the game
    private Seed currentPlayer; // the current player
    private JLabel statusBar; // for displaying status message
 
    /** Constructor to setup the UI and game components */
    public GameMain() {
 
    // This JPanel fires MouseEvent
    this.addMouseListener(new MouseAdapter() {
        @Override
        public void mouseClicked(MouseEvent e) { // mouse-clicked handler
            int mouseX = e.getX();
            int mouseY = e.getY();
    // Get the row and column clicked
        int rowSelected = mouseY / CELL_SIZE;
        int colSelected = mouseX / CELL_SIZE;
        if (currentState == GameState.PLAYING) {
            if (rowSelected >= 0 && rowSelected < ROWS
                && colSelected >= 0 && colSelected < COLS
                && board.cells[rowSelected][colSelected].content == Seed.EMPTY) 
                {
                board.cells[rowSelected][colSelected].content = currentPlayer;  // move
                updateGame(currentPlayer, rowSelected, colSelected); //update currentState;
                // Switch player
                currentPlayer = (currentPlayer == Seed.CROSS) ?
                Seed.NOUGHT : Seed.CROSS;
                }
                } 
            else { // game over
                initGame(); // restart the game
                }
                // Refresh the drawing canvas
                repaint(); // Call-back paintComponent().
            }
        });

        // Setup the status bar (JLabel) to display status message
        statusBar = new JLabel(" ");
        statusBar.setFont(new Font(Font.DIALOG_INPUT, Font.BOLD, 14));
        statusBar.setBorder(BorderFactory.createEmptyBorder(2, 5, 4, 5));
        statusBar.setOpaque(true);
        statusBar.setBackground(Color.LIGHT_GRAY);

        setLayout(new BorderLayout());
        add(statusBar, BorderLayout.PAGE_END); // same as SOUTH
        setPreferredSize(new Dimension(CANVAS_WIDTH, CANVAS_HEIGHT + 30));
            // account for statusBar in height
        board = new Board(); // allocate the game-board
        initGame(); // Initialize the game variables
    }
    
    /** Initialize the game-board contents and the current-state */
    public void initGame() {
        for (int row = 0; row < ROWS; ++row) {
            for (int col = 0; col < COLS; ++col) {
                board.cells[row][col].content = Seed.EMPTY; // all cells empty
            }
        }
        currentState = GameState.PLAYING; // ready to play
        currentPlayer = Seed.CROSS; // cross plays first
    }

    /** Update the currentState after the player with "theSeed" has placed on (row, col) */
    public void updateGame(Seed theSeed, int row, int col) {
        if (board.hasWon(theSeed, row, col)) { // check for win
            currentState = (theSeed == Seed.CROSS) ? GameState.CROSS_WON :
            GameState.NOUGHT_WON;
        } else if (board.isDraw()) { // check for draw
            currentState = GameState.DRAW;
        }
        // Otherwise, no change to current state (PLAYING).
    }

    /** Custom painting codes on this JPanel */
    @Override
    public void paintComponent(Graphics g){
        //invoke via repaint()
        super.paintComponent(g); // fill background
        setBackground(Color.WHITE); // set its background color
    board.paint(g); // ask the game board to paint itself
 
    // Print status-bar message
    if (currentState == GameState.PLAYING) {
        statusBar.setForeground(Color.BLACK);
        if (currentPlayer == Seed.CROSS) {
            statusBar.setText("X's Turn");
        } else {
            statusBar.setText("O's Turn");
        }
    } else if (currentState == GameState.DRAW) {
        statusBar.setForeground(Color.RED);
        statusBar.setText("It's a Draw! Click to play again.");
    } else if (currentState == GameState.CROSS_WON) {
        statusBar.setForeground(Color.RED);
        statusBar.setText("'X' Won! Click to play again.");
    } else if (currentState == GameState.NOUGHT_WON) {
        statusBar.setForeground(Color.RED);
        statusBar.setText("'O' Won! Click to play again.");
        }
    }

    /** The entry "main" method */
    public static void main(String[] args) {
        // Run GUI construction codes in Event-Dispatching thread for thread safety
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                JFrame frame = new JFrame(TITLE);
        // Set the content-pane of the JFrame to an instance of main JPanel
            frame.setContentPane(new GameMain());
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.pack();
    // center the application window
            frame.setLocationRelativeTo(null);
            frame.setVisible(true); // show it
            }
        });
    }
}

//class ini beriskan hampir selurus mekanisme yang digunakan dalam menjalankan permainan tictactoe
//class ini menggunakan class cell.java dalam menentukan ada berapa banyak baris dan coulomb yang ingin dibentuk
//class ini juga menentukan ketebalan garis pada papan yang ingin dimainkan 
//class ini juga mendefinisikan kegunaan dari class seperti seed.java, gamestate.java, state.java, dan board.java
//class ini mendefinisikan click dari mouse untuk mengisi cell yang player inginkan
//class ini memulai giliran lebih dulu pada player x
//class ini juga menampilkan pesan pada pada papan terkait giliran dan juga kondisi akhir yang dicapai
//saat class ini sudah mencapai posisi akhir, maka dengan melakukan klik kembali permainan dapat dimulai kembali
//class ini mampu menyimpan kondisi yang sudah dilakukan pada masing-masing langkah sehingga dapat menggambbarkan topologi tree pada bagian "updateseed"

//berikut merupakan kondisi saat class dicompile


//program dari class ini masih memiliki beberapa kekurangan saat permainan dijalankan
//pemain cross selalu memulai duluan hal ini akan membuat tidak adil dengan player lingkaran sehingga perlu menambahkan fungsi random dalam menentukan giliran
//permainan tictactoe memiliki sebuah tric menjebak player kedua sehingga dengan board 3 x 3 akan menghasilkan hasil draw atau hanya player pertama yang akan selalu menang ketika berhasil menjebak
//oleh karena itu penambahan jumlah cell sangat penting untuk menciptakan kemungkinan yang lebih banyak
//ada 2 class yang dapat diubah untuk mengatasi kekurangan tersebut yaitu GameMain.java dan Board.java
//berikut penjelasannya

//Perubahan GameMain.Java
package TicTacToe;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
/**
* Tic-Tac-Toe: Two-player Graphic version with better OO design.
* The Board and Cell classes are separated in their own classes.
*/
@SuppressWarnings("serial")
public class GameMain extends JPanel {
    // Named-constants for the game board
    public static final int ROWS = 6; // ROWS by COLS cells
    public static final int COLS = 6;
    public static final String TITLE = "Tic Tac Toe";

    // Name-constants for the various dimensions used for graphics drawing
    public static final int CELL_SIZE = 100; // cell width and height (square)
    public static final int CANVAS_WIDTH = CELL_SIZE * COLS; // the drawing canvas
    public static final int CANVAS_HEIGHT = CELL_SIZE * ROWS;
    public static final int GRID_WIDTH = 8; // Grid-line's width
    public static final int GRID_WIDHT_HALF = GRID_WIDTH / 2; // Grid-line's half-width

    // Symbols (cross/nought) are displayed inside a cell, with padding from border
    public static final int CELL_PADDING = CELL_SIZE / 6;
    public static final int SYMBOL_SIZE = CELL_SIZE - CELL_PADDING * 2;
    public static final int SYMBOL_STROKE_WIDTH = 8; // pen's stroke width
 
    private Board board; // the game board
    private GameState currentState;//the current state of the game
    private Seed currentPlayer; // the current player
    private JLabel statusBar; // for displaying status message
 
    /** Constructor to setup the UI and game components */
    public GameMain() {
 
    // This JPanel fires MouseEvent
    this.addMouseListener(new MouseAdapter() {
        @Override
        public void mouseClicked(MouseEvent e) { // mouse-clicked handler
            int mouseX = e.getX();
            int mouseY = e.getY();
    // Get the row and column clicked
        int rowSelected = mouseY / CELL_SIZE;
        int colSelected = mouseX / CELL_SIZE;
        if (currentState == GameState.PLAYING) {
            if (rowSelected >= 0 && rowSelected < ROWS
                && colSelected >= 0 && colSelected < COLS
                && board.cells[rowSelected][colSelected].content == Seed.EMPTY) 
                {
                board.cells[rowSelected][colSelected].content = currentPlayer;  // move
                updateGame(currentPlayer, rowSelected, colSelected); //update currentState;
                // Switch player
                currentPlayer = (currentPlayer == Seed.CROSS) ?
                Seed.NOUGHT : Seed.CROSS;
                }
                } 
            else { // game over
                initGame(); // restart the game
                }
                // Refresh the drawing canvas
                repaint(); // Call-back paintComponent().
            }
        });

        // Setup the status bar (JLabel) to display status message
        statusBar = new JLabel(" ");
        statusBar.setFont(new Font(Font.DIALOG_INPUT, Font.BOLD, 14));
        statusBar.setBorder(BorderFactory.createEmptyBorder(2, 5, 4, 5));
        statusBar.setOpaque(true);
        statusBar.setBackground(Color.LIGHT_GRAY);

        setLayout(new BorderLayout());
        add(statusBar, BorderLayout.PAGE_END); // same as SOUTH
        setPreferredSize(new Dimension(CANVAS_WIDTH, CANVAS_HEIGHT + 30));
            // account for statusBar in height
        board = new Board(); // allocate the game-board
        initGame(); // Initialize the game variables
    }
    
    /** Initialize the game-board contents and the current-state */
    public void initGame() {
        for (int row = 0; row < ROWS; ++row) {
            for (int col = 0; col < COLS; ++col) {
                board.cells[row][col].content = Seed.EMPTY; // all cells empty
            }
        }
        currentState = GameState.PLAYING; // ready to play
        currentPlayer = Seed.CROSS; // cross plays first
    }

    /** Update the currentState after the player with "theSeed" has placed on (row, col) */
    public void updateGame(Seed theSeed, int row, int col) {
        if (board.hasWon(theSeed, row, col)) { // check for win
            currentState = (theSeed == Seed.CROSS) ? GameState.CROSS_WON :
            GameState.NOUGHT_WON;
        } else if (board.isDraw()) { // check for draw
            currentState = GameState.DRAW;
        }
        // Otherwise, no change to current state (PLAYING).
    }

    /** Custom painting codes on this JPanel */
    @Override
    public void paintComponent(Graphics g){
        //invoke via repaint()
        super.paintComponent(g); // fill background
        setBackground(Color.WHITE); // set its background color
    board.paint(g); // ask the game board to paint itself
 
    // Print status-bar message
    if (currentState == GameState.PLAYING) {
        statusBar.setForeground(Color.BLACK);
        if (currentPlayer == Seed.CROSS) {
            statusBar.setText("X's Turn");
        } else {
            statusBar.setText("O's Turn");
        }
    } else if (currentState == GameState.DRAW) {
        statusBar.setForeground(Color.RED);
        statusBar.setText("It's a Draw! Click to play again.");
    } else if (currentState == GameState.CROSS_WON) {
        statusBar.setForeground(Color.RED);
        statusBar.setText("'X' Won! Click to play again.");
    } else if (currentState == GameState.NOUGHT_WON) {
        statusBar.setForeground(Color.RED);
        statusBar.setText("'O' Won! Click to play again.");
        }
    }

    /** The entry "main" method */
    public static void main(String[] args) {
        // Run GUI construction codes in Event-Dispatching thread for thread safety
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                JFrame frame = new JFrame(TITLE);
        // Set the content-pane of the JFrame to an instance of main JPanel
            frame.setContentPane(new GameMain());
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.pack();
    // center the application window
            frame.setLocationRelativeTo(null);
            frame.setVisible(true); // show it
            }
        });
    }
}

//dilakukan perubahan pada bagian
//public static final int ROWS = 6; // ROWS by COLS cells
    //public static final int COLS = 6;
//untuk menciptakan papan tictactoe yang berjumlah 6x 6

//perubahan Board.java
package TicTacToe;
import java.awt.*;

/**
* The Board class models the ROWS-by-COLS game-board.
*/
public class Board {
    // package access
    // composes of 2D array of ROWS-by-COLS Cell instances
    Cell[][] cells;

    /** Constructor to initialize the game board */
    public Board() {

    // allocate the array
    cells = new Cell[GameMain.ROWS][GameMain.COLS];
    for (int row = 0; row < GameMain.ROWS; ++row) {
        for (int col = 0; col < GameMain.COLS; ++col) {
            // allocate element of array
            cells[row][col] = new Cell(row, col);
            }
        }
    }

    /** Initialize (or re-initialize) the game board */
    public void init() {   
        for (int row = 0; row < GameMain.ROWS; ++row) {
            for (int col = 0; col < GameMain.COLS; ++col) {
                // clear the cell content
                cells[row][col].clear();
            }
        }  
    }

    /** Return true if it is a draw (i.e., no more EMPTY cell) */
    public boolean isDraw() {
        for (int row = 0; row < GameMain.ROWS; ++row) {
            for (int col = 0; col < GameMain.COLS; ++col) {
                if (cells[row][col].content == Seed.EMPTY) {
                    // an empty seed found, not a draw, exit
                        return false;
                }
            }
        }
        return true; // no empty cell, it's a draw
    }

    /** Return true if the player with "seed" has won after placing at
        (seedRow, seedCol) */
    public boolean hasWon(Seed seed, int seedRow, int seedCol) {
        return (cells[seedRow][0].content == seed // 4-in-the-row
            && cells[seedRow][1].content == seed
            && cells[seedRow][2].content == seed
            && cells[seedRow][3].content == seed
        || cells[0][seedCol].content == seed // 4-in-the-column
            && cells[1][seedCol].content == seed
            && cells[2][seedCol].content == seed
            && cells[3][seedCol].content == seed
        || seedRow == seedCol // 4-in-the-diagonal
            && cells[0][0].content == seed
            && cells[1][1].content == seed
            && cells[2][2].content == seed
            && cells[3][3].content == seed
        || seedRow + seedCol == 2 // 4-in-the-opposite-diagonal
            && cells[0][3].content == seed
            && cells[1][2].content == seed
            && cells[2][1].content == seed
            && cells[3][3]0content == seed);
    }

    /** Paint itself on the graphics canvas, given the Graphics context */
    public void paint(Graphics g) {
        // Draw the grid-lines
        g.setColor(Color.GRAY);
        for (int row = 1; row < GameMain.ROWS; ++row) {
            g.fillRoundRect(0, GameMain.CELL_SIZE * row - GameMain.GRID_WIDHT_HALF,
                GameMain.CANVAS_WIDTH-1, GameMain.GRID_WIDTH,
                GameMain.GRID_WIDTH, GameMain.GRID_WIDTH);
        }
        for (int col = 1; col < GameMain.COLS; ++col) {
            g.fillRoundRect(GameMain.CELL_SIZE * col - GameMain.GRID_WIDHT_HALF, 0,
                GameMain.GRID_WIDTH, GameMain.CANVAS_HEIGHT - 1,
                GameMain.GRID_WIDTH, GameMain.GRID_WIDTH);
        }
        // Draw all the cells
        for (int row = 0; row < GameMain.ROWS; ++row) {
            for (int col = 0; col < GameMain.COLS; ++col) {
                cells[row][col].paint(g); // ask the cell to paint itself
            }
        }
    }
}


//dilakukan perubahan pada bagian
 //public boolean hasWon(Seed seed, int seedRow, int seedCol) {
        //return (cells[seedRow][0].content == seed // 4-in-the-row
           //&& cells[seedRow][1].content == seed
            //&& cells[seedRow][2].content == seed
            //&& cells[seedRow][3].content == seed
        //|| cells[0][seedCol].content == seed // 4-in-the-column
            //&& cells[1][seedCol].content == seed
            //&& cells[2][seedCol].content == seed
            //&& cells[3][seedCol].content == seed
        //|| seedRow == seedCol // 4-in-the-diagonal
            //&& cells[0][0].content == seed
            //&& cells[1][1].content == seed
            //&& cells[2][2].content == seed
            //&& cells[3][3].content == seed
        //|| seedRow + seedCol == 2 // 4-in-the-opposite-diagonal
            //&& cells[0][3].content == seed
            //&& cells[1][2].content == seed
            //&& cells[2][1].content == seed
            //&& cells[3][3]0content == seed);
    //}
//dengan menambahkan kondisi menang menjadi 4 berturut turt maka kondisi menjebak dapat dikurangi

//berikut tampilan dari class yang sudah diperbaharui
